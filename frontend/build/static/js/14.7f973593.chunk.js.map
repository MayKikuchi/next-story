{"version":3,"sources":["containers/Container/index.tsx","constants/dataTypes.ts","components/TagButton/index.tsx","components/TagsSection/index.tsx","components/SearchResultBlock/index.tsx","components/SearchResultsInfiniteScroll/index.tsx","containers/SingleSearchResultPage/index.tsx"],"names":["StyledContainer","styled","Container","MarginContainer","props","maxWidth","children","MediaType","SingleQueryType","StyledTagButton","button","theme","palette","primary","light","secondary","TagButton","label","tagId","singleQueryType","history","useHistory","onClick","push","StyledTagsSection","div","TagsSection","tags","tagObjects","map","tag","index","key","tagObject","tagName","Block","grey","TopBar","StyledImage","img","isSmall","StyledTitle","StyledLink","Link","SearchResultBlock","image","title","blurb","genres","mediaType","mediaId","nextStoryTags","useMediaQuery","goToPage","Grid","container","direction","spacing","item","sm","src","variant","color","gutterBottom","genre","SearchResultsInfiniteScroll","resultsToDisplay","hasMore","doNext","style","overflow","dataLength","length","scrollThreshold","next","loader","textAlign","endMessage","result","id","SingleSearchResultPage","locationSearch","substr","split","singleQueryTypeUri","queryUri","getQueryTypeAndQuery","decodeURI","location","search","queryType","query","useState","queryStartIndex","setQueryStartIndex","movieResults","setMovieResults","bookResults","setBookResults","allResults","setAllResults","filterState","hasMoreMovieResults","setHasMoreMovieResults","hasMoreBookResults","setHasMoreBookResults","a","mongoMovies","mongoBooks","axios","get","mongoMovieRes","data","console","log","mongoBookRes","bookData","movieData","maxEndIndex","movieEndIndex","bookEndIndex","i","movieId","movieRes","movieWithNextStoryTags","thisMongoMovieMaybe","filter","m","thisMongoMovie","bookId","bookRes","bookWithNextStoryTags","thisMongoBookMaybe","b","thisMongoBook","useEffect","getMediaForTag","then","res","getFromThirdParty","catch","e","searchBar","person","movies","books","error","useMemo","Typography"],"mappings":"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","file":"static/js/14.7f973593.chunk.js","sourcesContent":["import React, {ReactNode} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledContainer = styled(Container)`\r\n    margin-top: 85px;\r\n    margin-bottom: 85px;\r\n`;\r\n\r\ninterface MarginContainerProps {\r\n    maxWidth: 'lg'\r\n        | 'md'\r\n        | 'sm'\r\n        | 'xl'\r\n        | 'xs'\r\n        | false;\r\n    children: ReactNode;\r\n}\r\n\r\nconst MarginContainer: React.FC<MarginContainerProps> = (props: MarginContainerProps) => {\r\n    return (\r\n        <StyledContainer maxWidth={props.maxWidth}>{props.children}</StyledContainer>\r\n    );\r\n};\r\n\r\nexport default MarginContainer;\r\n","export enum MediaType {\r\n    movie = 'movie',\r\n    book = 'book',\r\n    start = ''\r\n}\r\n\r\nexport enum SingleQueryType {\r\n    person = 'person',\r\n    genre = 'genre',\r\n    tag = 'tag',\r\n    searchBar = 'searchBar'\r\n}\r\n\r\nexport type CardData = {\r\n    title: string,\r\n    id: string,\r\n    mediaType: MediaType,\r\n    image: string, // the url, etc to the image\r\n    genres: string[],\r\n    nextStoryTags: string[],\r\n    people: string,\r\n    blurb: string,\r\n    avgRating: number\r\n}\r\n\r\nexport interface Tag{\r\n  tagId: string;\r\n  tagName: string;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useHistory} from 'react-router';\r\nimport {SingleQueryType} from '../../constants/dataTypes';\r\n\r\ninterface TagsButtonProps {\r\n    label: string;\r\n    singleQueryType: SingleQueryType;\r\n    tagId?: string; // needed for if the tag button is being used for nextStoryTags\r\n}\r\n\r\nconst StyledTagButton = styled.button`\r\n    border-radius: 7px;\r\n    color: white;\r\n    outline: none;\r\n    border: none;\r\n    margin: 5px;\r\n    cursor: pointer;\r\n    background-color: ${({ theme }) => theme.palette.primary.light};\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.palette.secondary.light};\r\n    }\r\n    font-size: 16px;\r\n    padding: 3px 5px 3px 5px;\r\n`;\r\n\r\nconst TagButton: React.FC<TagsButtonProps> = (props: TagsButtonProps) => {\r\n    const { label, tagId, singleQueryType } = props;\r\n    const history = useHistory();\r\n\r\n    const goToSingleQuery = () => {\r\n        history.push(`/searchResult/param?singleQueryType=${singleQueryType}&query=${tagId || label}`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {label &&\r\n                <StyledTagButton\r\n                    onClick={goToSingleQuery}\r\n                >\r\n                    {label}\r\n                </StyledTagButton>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TagButton;\r\n","import React from 'react';\r\nimport TagButton from '../TagButton';\r\nimport styled from 'styled-components';\r\nimport {SingleQueryType} from '../../constants/dataTypes';\r\n\r\ninterface TagsSectionProps {\r\n    singleQueryType: SingleQueryType;\r\n    tags?: string[],\r\n    tagObjects?: Array<{ tagId: string, tagName: string }>\r\n}\r\n\r\nconst StyledTagsSection = styled.div`\r\n    margin-bottom: 15px;\r\n`;\r\n\r\nconst TagsSection: React.FC<TagsSectionProps> = (props: TagsSectionProps) => {\r\n    const { singleQueryType, tags, tagObjects } = props;\r\n    return (\r\n        <StyledTagsSection>\r\n            { tags && tags.map((tag, index) => {\r\n                return (\r\n                    <TagButton\r\n                        key={index}\r\n                        label={tag}\r\n                        singleQueryType={singleQueryType}\r\n                    />);\r\n            }) }\r\n            { !tags && tagObjects && tagObjects.map((tagObject, index) => {\r\n                return (\r\n                    <TagButton\r\n                        key={index}\r\n                        label={tagObject.tagName}\r\n                        singleQueryType={singleQueryType}\r\n                        tagId={tagObject.tagId}\r\n                    />);\r\n            }) }\r\n        </StyledTagsSection>\r\n    );\r\n};\r\n\r\nexport default TagsSection;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Grid, Link, useMediaQuery} from '@material-ui/core';\r\nimport {MediaType, SingleQueryType} from '../../constants/dataTypes';\r\nimport TagsSection from '../TagsSection';\r\nimport {useHistory} from 'react-router';\r\n\r\ninterface SearchResultBlockProps {\r\n    image: string;\r\n    title: string;\r\n    blurb: string;\r\n    genres: Array<string>;\r\n    mediaType: MediaType;\r\n    mediaId: string;\r\n    nextStoryTags?: Array<any>; // optional\r\n}\r\n\r\nconst Block = styled.div`\r\n    border-top: ${({ theme }) => `2px solid ${theme.palette.grey[400]}`};\r\n    border-bottom: ${({ theme }) => `2px solid ${theme.palette.grey[400]}`};\r\n    min-height: 50px;\r\n    padding: 5px;\r\n    margin-bottom: 2px;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst StyledImage = styled.img<{isSmall: boolean}>`\r\n    max-width: ${(props) => props.isSmall ? '150px' : '100%'};\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst StyledTitle = styled.div`\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst SearchResultBlock: React.FC<SearchResultBlockProps> = (props: SearchResultBlockProps) => {\r\n    const { image, title, blurb, genres, mediaType, mediaId, nextStoryTags } = props;\r\n    const history = useHistory();\r\n    const isSmall = useMediaQuery('(max-width:450px)');\r\n\r\n    const goToPage = () => {\r\n        history.push(`/${mediaType}/${mediaId}`);\r\n    };\r\n\r\n    return (\r\n        <Block>\r\n            <TopBar>\r\n                <Grid container direction={'row'}  spacing={5}>\r\n                    <Grid item sm={3}>\r\n                        <StyledImage src={image} onClick={goToPage} isSmall={isSmall}/>\r\n                    </Grid>\r\n                    <Grid item sm={6}>\r\n                        <StyledTitle>\r\n                            <StyledLink variant={'h5'} onClick={goToPage} color={'textPrimary'} gutterBottom>\r\n                                <strong>\r\n                                    {title}\r\n                                </strong>\r\n                            </StyledLink>\r\n                        </StyledTitle>\r\n                        {blurb}\r\n                    </Grid>\r\n                    <Grid item sm={3}>\r\n                        Genres:\r\n                        <TagsSection tags={genres} singleQueryType={SingleQueryType.genre}/>\r\n                        {nextStoryTags &&\r\n                            <>\r\n                                Tags:\r\n                                <TagsSection tagObjects={nextStoryTags} singleQueryType={SingleQueryType.tag}/>\r\n                            </>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n            </TopBar>\r\n        </Block>\r\n    );\r\n};\r\n\r\nexport default SearchResultBlock;\r\n","import React from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport SearchResultBlock from '../SearchResultBlock';\r\n\r\n\r\ninterface SearchResultsInfiniteScrollProps {\r\n    resultsToDisplay: Array<any>;\r\n    hasMore: boolean;\r\n    doNext: any;\r\n}\r\n\r\nconst SearchResultsInfiniteScroll = (props: SearchResultsInfiniteScrollProps) => {\r\n    const { resultsToDisplay, hasMore, doNext } = props;\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            style={{overflow: 'hidden'}}\r\n            dataLength={resultsToDisplay.length}\r\n            scrollThreshold={1}\r\n            next={doNext}\r\n            hasMore={hasMore}\r\n            loader={<h4 style={{textAlign: 'center'}}>Loading more results...</h4>}\r\n            endMessage={\r\n                <p style={{textAlign: 'center'}}>\r\n                    <b>No more results</b>\r\n                </p>\r\n            }>\r\n            {resultsToDisplay.map((result, index) =>\r\n                <SearchResultBlock\r\n                    key={index}\r\n                    image={result.image}\r\n                    title={result.title}\r\n                    blurb={result.blurb}\r\n                    genres={result.genres}\r\n                    nextStoryTags={result.nextStoryTags}\r\n                    mediaType={result.mediaType}\r\n                    mediaId={result.id}\r\n                />)\r\n            }\r\n        </InfiniteScroll>\r\n    );\r\n};\r\n\r\nexport default SearchResultsInfiniteScroll;\r\n","import React, {useEffect, useMemo, useState} from 'react';\r\nimport Container from '../Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from 'axios';\r\nimport {SingleQueryType} from '../../constants/dataTypes';\r\nimport SearchResultsInfiniteScroll from '../../components/SearchResultsInfiniteScroll';\r\n\r\nconst getQueryTypeAndQuery = (locationSearch: string) => {\r\n    const trimmedUri = locationSearch.substr(1);\r\n    const [singleQueryTypeUri, queryUri] = trimmedUri.split('&');\r\n    const queryType = singleQueryTypeUri.split('=')[1];\r\n    const query = queryUri.split('=')[1];\r\n    return [queryType, query];\r\n};\r\n\r\nconst SingleSearchResultPage: React.FC = (props: any) => {\r\n    const searchUri = decodeURI(props.location.search);\r\n    const [queryType, query] = getQueryTypeAndQuery(searchUri);\r\n    const increaseIndexBy = 5;\r\n\r\n    const [queryStartIndex, setQueryStartIndex] = useState(0);\r\n\r\n    const [movieResults, setMovieResults] = useState<Array<any>>([]);\r\n    const [bookResults, setBookResults] = useState<Array<any>>([]);\r\n\r\n    const [allResults, setAllResults] = useState<Array<any>>([]);\r\n    const [filterState, setFilterState] = useState<'all' | 'books' | 'movies'>('all');\r\n\r\n    const [hasMoreMovieResults, setHasMoreMovieResults] = useState<boolean>(true);\r\n    const [hasMoreBookResults, setHasMoreBookResults] = useState<boolean>(true);\r\n\r\n    async function getMediaForTag() {\r\n        let mongoMovies = [];\r\n        let mongoBooks = [];\r\n        try {\r\n            const mongoMovieRes = await axios.get(`/movies/withTag/${query}`);\r\n            mongoMovies = mongoMovieRes.data;\r\n        } catch (e) {\r\n            console.log('error fetching movies from mongo for tag', e);\r\n        }\r\n        try {\r\n            const mongoBookRes = await axios.get(`/books/withTag/${query}`);\r\n            mongoBooks = mongoBookRes.data;\r\n        } catch (e) {\r\n            console.log('error fetching movies from mongo for tag', e);\r\n        }\r\n        return [mongoMovies, mongoBooks];\r\n    }\r\n\r\n    async function getFromThirdParty(mongoMovies: any[], mongoBooks: any[]) {\r\n        const bookData: any[] = [];\r\n        const movieData: any[] = [];\r\n        const maxEndIndex = queryStartIndex + increaseIndexBy;\r\n        const movieEndIndex = mongoMovies.length >= maxEndIndex ? maxEndIndex : mongoMovies.length;\r\n        const bookEndIndex = mongoBooks.length >= maxEndIndex ? maxEndIndex : mongoBooks.length;\r\n        for(let i = queryStartIndex; i < movieEndIndex; i++){\r\n            const movieId = mongoMovies[i].movieId;\r\n            try {\r\n                const movieRes = await axios.get(`/thirdPartyMovieApi/tmdbMovies/searchOneById/${movieId}`);\r\n                let movieWithNextStoryTags = movieRes.data;\r\n                const thisMongoMovieMaybe = mongoMovies.filter((m) => m.movieId === movieId);\r\n                const thisMongoMovie = thisMongoMovieMaybe.length > 0 && thisMongoMovieMaybe[0];\r\n                if (thisMongoMovie) {\r\n                    movieWithNextStoryTags.nextStoryTags = thisMongoMovie.nextStoryTags;\r\n                } else {\r\n                    movieWithNextStoryTags.nextStoryTags = [];\r\n                }\r\n                movieData.push(movieWithNextStoryTags);\r\n                setAllResults((allResults) => [...allResults, movieWithNextStoryTags]);\r\n                setMovieResults((movieResults) => [...movieResults, movieWithNextStoryTags]);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n        for(let i = queryStartIndex; i < bookEndIndex; i++){\r\n            const bookId = mongoBooks[i].bookId;\r\n            try {\r\n                const bookRes = await axios.get(`/thirdPartyBookApi/googleBooks/searchOneById/${bookId}`);\r\n                let bookWithNextStoryTags = bookRes.data;\r\n                const thisMongoBookMaybe = mongoBooks.filter((b) => b.bookId === bookId);\r\n                const thisMongoBook = thisMongoBookMaybe.length > 0 && thisMongoBookMaybe[0];\r\n                if (thisMongoBook) {\r\n                    bookWithNextStoryTags.nextStoryTags = thisMongoBook.nextStoryTags;\r\n                } else {\r\n                    bookWithNextStoryTags.nextStoryTags = [];\r\n                }\r\n                bookData.push(bookWithNextStoryTags);\r\n                setAllResults((allResults) => [...allResults, bookWithNextStoryTags]);\r\n                setBookResults((bookResults) => [...bookResults, bookWithNextStoryTags]);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n        if (movieData.length === 0) {\r\n            setHasMoreMovieResults(false);\r\n        }\r\n        if (bookData.length === 0) {\r\n            setHasMoreBookResults(false);\r\n        }\r\n        return [movieData, bookData];\r\n    }\r\n\r\n    useEffect(() => {\r\n        switch (queryType) {\r\n            case SingleQueryType.tag:\r\n                getMediaForTag().then((res) => {\r\n                    const [mongoMovies, mongoBooks] = res;\r\n                    console.log('mongo movies and books:', res);\r\n                    getFromThirdParty(mongoMovies, mongoBooks).then((res) => {\r\n                        console.log(res);\r\n                        const [movieData, bookData] = res;\r\n                        setMovieResults(movieData);\r\n                        setBookResults(bookData);\r\n                    }).catch((e) => console.log(e));\r\n                }).catch((e) => console.log(e));\r\n                break;\r\n            case SingleQueryType.searchBar:\r\n            case SingleQueryType.genre:\r\n            case SingleQueryType.person:\r\n                axios.get(`/thirdPartyMovieApi/tmdbMovies/singleQuery/${queryType}/${query}/${queryStartIndex}/${increaseIndexBy}`)\r\n                    .then((res: any) => {\r\n                        const movies = res.data;\r\n                        console.log(movies);\r\n                        if (movies.length === 0) {\r\n                            setHasMoreMovieResults(false);\r\n                        } else {\r\n                            setMovieResults(movies);\r\n                        }\r\n                        axios.get(`/thirdPartyBookApi/googleBooks/singleQuery/${queryType}/${query}/${queryStartIndex}/${increaseIndexBy}`)\r\n                            .then((res: any) => {\r\n                                const books = res.data;\r\n                                console.log(books);\r\n                                if (books.length === 0) {\r\n                                    setHasMoreBookResults(false);\r\n                                } else {\r\n                                    setBookResults(books);\r\n                                    setAllResults((allResults) => [...allResults, ...movies, ...books]);\r\n                                }\r\n                            })\r\n                            .catch((error: any) => {\r\n                                console.log('Error getting third party books', error);\r\n                            });\r\n                    })\r\n                    .catch((error: any) => {\r\n                        console.log('Error getting third party movies', error);\r\n                    });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [queryType, query, queryStartIndex]);\r\n\r\n    const resultsToDisplay = useMemo(() => {\r\n        switch(filterState) {\r\n            case 'movies':\r\n                return movieResults;\r\n            case 'books':\r\n                return bookResults;\r\n            case 'all':\r\n            default:\r\n                return allResults;\r\n        }\r\n    }, [filterState, movieResults, bookResults, allResults]);\r\n\r\n    const doNext = () => {\r\n        console.log('set next');\r\n        setQueryStartIndex(queryStartIndex + increaseIndexBy);\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth='md'>\r\n            <Typography variant='h1'>Search Results</Typography>\r\n            <br/>\r\n            <SearchResultsInfiniteScroll\r\n                resultsToDisplay={resultsToDisplay}\r\n                hasMore={hasMoreMovieResults || hasMoreBookResults}\r\n                doNext={doNext}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SingleSearchResultPage;\r\n"],"sourceRoot":""}