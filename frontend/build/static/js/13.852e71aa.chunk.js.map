{"version":3,"sources":["containers/Container/index.tsx","constants/dataTypes.ts","components/TagButton/index.tsx","components/TagsSection/index.tsx","components/SearchResultBlock/index.tsx","components/SearchResultsInfiniteScroll/index.tsx","containers/SingleSearchResultPage/index.tsx"],"names":["StyledContainer","styled","Container","MarginContainer","props","maxWidth","children","MediaType","SingleQueryType","StyledTagButton","button","theme","palette","primary","light","secondary","TagButton","label","singleQueryType","history","useHistory","onClick","push","StyledTagsSection","div","TagsSection","tags","tagObjects","map","tag","index","key","tagObject","tagName","Block","grey","TopBar","StyledImage","img","isSmall","StyledTitle","StyledLink","Link","SearchResultBlock","image","title","blurb","genres","mediaType","mediaId","useMediaQuery","goToPage","Grid","container","direction","spacing","item","sm","src","variant","color","gutterBottom","genre","SearchResultsInfiniteScroll","resultsToDisplay","hasMore","doNext","style","overflow","dataLength","length","scrollThreshold","next","loader","textAlign","endMessage","result","id","SingleSearchResultPage","locationSearch","substr","split","singleQueryTypeUri","queryUri","getQueryTypeAndQuery","decodeURI","location","search","queryType","query","useState","bookQueryStartIndex","setBookQueryStartIndex","movieQueryStartIndex","setMovieQueryStartIndex","movieResults","setMovieResults","bookResults","setBookResults","allResults","setAllResults","filterState","hasMoreMovieResults","setHasMoreMovieResults","hasMoreBookResults","setHasMoreBookResults","useEffect","console","log","searchBar","person","axios","get","then","res","movies","data","books","catch","error","useMemo","Typography"],"mappings":"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","file":"static/js/13.852e71aa.chunk.js","sourcesContent":["import React, {ReactNode} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledContainer = styled(Container)`\r\n    margin-top: 85px;\r\n    margin-bottom: 85px;\r\n`;\r\n\r\ninterface MarginContainerProps {\r\n    maxWidth: 'lg'\r\n        | 'md'\r\n        | 'sm'\r\n        | 'xl'\r\n        | 'xs'\r\n        | false;\r\n    children: ReactNode;\r\n}\r\n\r\nconst MarginContainer: React.FC<MarginContainerProps> = (props: MarginContainerProps) => {\r\n    return (\r\n        <StyledContainer maxWidth={props.maxWidth}>{props.children}</StyledContainer>\r\n    );\r\n};\r\n\r\nexport default MarginContainer;\r\n","export enum MediaType {\r\n    movie = 'movie',\r\n    book = 'book',\r\n    start = ''\r\n}\r\n\r\nexport enum SingleQueryType {\r\n    person = 'person',\r\n    genre = 'genre',\r\n    tag = 'tag',\r\n    searchBar = 'searchBar'\r\n}\r\n\r\nexport type CardData = {\r\n    title: string,\r\n    id: string,\r\n    mediaType: MediaType,\r\n    image: string, // the url, etc to the image\r\n    genres: string[],\r\n    nextStoryTags: string[],\r\n    people: string,\r\n    blurb: string,\r\n    avgRating: number\r\n}\r\n\r\nexport interface Tag{\r\n  tagId: string;\r\n  tagName: string;\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useHistory} from 'react-router';\r\nimport {SingleQueryType} from '../../constants/dataTypes';\r\n\r\ninterface TagsButtonProps {\r\n    label: string;\r\n    singleQueryType: SingleQueryType;\r\n}\r\n\r\nconst StyledTagButton = styled.button`\r\n    border-radius: 7px;\r\n    color: white;\r\n    outline: none;\r\n    border: none;\r\n    margin: 5px;\r\n    cursor: pointer;\r\n    background-color: ${({ theme }) => theme.palette.primary.light};\r\n    &:hover {\r\n        background-color: ${({ theme }) => theme.palette.secondary.light};\r\n    }\r\n    font-size: 16px;\r\n    padding: 3px 5px 3px 5px;\r\n`;\r\n\r\nconst TagButton: React.FC<TagsButtonProps> = (props: TagsButtonProps) => {\r\n    const { label, singleQueryType } = props;\r\n    const history = useHistory();\r\n\r\n    const goToSingleQuery = () => {\r\n        history.push(`/searchResult/param?singleQueryType=${singleQueryType}&query=${label}`);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {label &&\r\n                <StyledTagButton\r\n                    onClick={goToSingleQuery}\r\n                >\r\n                    {label}\r\n                </StyledTagButton>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TagButton;\r\n","import React from 'react';\r\nimport TagButton from '../TagButton';\r\nimport styled from 'styled-components';\r\nimport {SingleQueryType} from '../../constants/dataTypes';\r\n\r\ninterface TagsSectionProps {\r\n    singleQueryType: SingleQueryType;\r\n    tags?: string[],\r\n    tagObjects?: Array<{ tagId: string, tagName: string }>\r\n}\r\n\r\nconst StyledTagsSection = styled.div`\r\n    margin-bottom: 15px;\r\n`;\r\n\r\nconst TagsSection: React.FC<TagsSectionProps> = (props: TagsSectionProps) => {\r\n    const { singleQueryType, tags, tagObjects } = props;\r\n    return (\r\n        <StyledTagsSection>\r\n            { tags && tags.map((tag, index) => <TagButton key={index} label={tag} singleQueryType={singleQueryType}/>) }\r\n            { !tags && tagObjects && tagObjects.map((tagObject, index) => {\r\n                return <TagButton key={index} label={tagObject.tagName} singleQueryType={singleQueryType}/>;\r\n            }) }\r\n        </StyledTagsSection>\r\n    );\r\n};\r\n\r\nexport default TagsSection;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Grid, Link, useMediaQuery} from '@material-ui/core';\r\nimport {MediaType, SingleQueryType} from '../../constants/dataTypes';\r\nimport TagsSection from '../TagsSection';\r\nimport {useHistory} from 'react-router';\r\n\r\ninterface SearchResultBlockProps {\r\n    image: string;\r\n    title: string;\r\n    blurb: string;\r\n    genres: Array<string>;\r\n    mediaType: MediaType;\r\n    mediaId: string;\r\n}\r\n\r\nconst Block = styled.div`\r\n    border-top: ${({ theme }) => `2px solid ${theme.palette.grey[400]}`};\r\n    border-bottom: ${({ theme }) => `2px solid ${theme.palette.grey[400]}`};\r\n    min-height: 50px;\r\n    padding: 5px;\r\n    margin-bottom: 2px;\r\n`;\r\n\r\nconst TopBar = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n`;\r\n\r\nconst StyledImage = styled.img<{isSmall: boolean}>`\r\n    max-width: ${(props) => props.isSmall ? '150px' : '100%'};\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst StyledTitle = styled.div`\r\n    margin-bottom: 5px;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst SearchResultBlock: React.FC<SearchResultBlockProps> = (props: SearchResultBlockProps) => {\r\n    const { image, title, blurb, genres, mediaType, mediaId } = props;\r\n    const history = useHistory();\r\n    const isSmall = useMediaQuery('(max-width:450px)');\r\n\r\n    const goToPage = () => {\r\n        history.push(`/${mediaType}/${mediaId}`);\r\n    };\r\n\r\n    return (\r\n        <Block>\r\n            <TopBar>\r\n                <Grid container direction={'row'}  spacing={5}>\r\n                    <Grid item sm={3}>\r\n                        <StyledImage src={image} onClick={goToPage} isSmall={isSmall}/>\r\n                    </Grid>\r\n                    <Grid item sm={6}>\r\n                        <StyledTitle>\r\n                            <StyledLink variant={'h5'} onClick={goToPage} color={'textPrimary'} gutterBottom>\r\n                                <strong>\r\n                                    {title}\r\n                                </strong>\r\n                            </StyledLink>\r\n                        </StyledTitle>\r\n                        {blurb}\r\n                    </Grid>\r\n                    <Grid item sm={3}>\r\n                        <TagsSection tags={genres} singleQueryType={SingleQueryType.genre}/>\r\n                    </Grid>\r\n                </Grid>\r\n            </TopBar>\r\n        </Block>\r\n    );\r\n};\r\n\r\nexport default SearchResultBlock;\r\n","import React from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport SearchResultBlock from '../SearchResultBlock';\r\n\r\n\r\ninterface SearchResultsInfiniteScrollProps {\r\n    resultsToDisplay: Array<any>;\r\n    hasMore: boolean;\r\n    doNext: any;\r\n}\r\n\r\nconst SearchResultsInfiniteScroll = (props: SearchResultsInfiniteScrollProps) => {\r\n    const { resultsToDisplay, hasMore, doNext } = props;\r\n\r\n    return (\r\n        <InfiniteScroll\r\n            style={{overflow: 'hidden'}}\r\n            dataLength={resultsToDisplay.length}\r\n            scrollThreshold={1}\r\n            next={doNext}\r\n            hasMore={hasMore}\r\n            loader={<h4 style={{textAlign: 'center'}}>Loading more results...</h4>}\r\n            endMessage={\r\n                <p style={{textAlign: 'center'}}>\r\n                    <b>No more reviews</b>\r\n                </p>\r\n            }>\r\n            {resultsToDisplay.map((result, index) =>\r\n                <SearchResultBlock\r\n                    key={index}\r\n                    image={result.image}\r\n                    title={result.title}\r\n                    blurb={result.blurb}\r\n                    genres={result.genres}\r\n                    mediaType={result.mediaType}\r\n                    mediaId={result.id}\r\n                />)\r\n            }\r\n        </InfiniteScroll>\r\n    );\r\n};\r\n\r\nexport default SearchResultsInfiniteScroll;\r\n","import React, {useEffect, useMemo, useState} from 'react';\r\nimport Container from '../Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from 'axios';\r\nimport {SingleQueryType} from '../../constants/dataTypes';\r\nimport SearchResultBlock from '../../components/SearchResultBlock';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport SearchResultsInfiniteScroll from '../../components/SearchResultsInfiniteScroll';\r\n\r\nconst getQueryTypeAndQuery = (locationSearch: string) => {\r\n    const trimmedUri = locationSearch.substr(1);\r\n    const [singleQueryTypeUri, queryUri] = trimmedUri.split('&');\r\n    const queryType = singleQueryTypeUri.split('=')[1];\r\n    const query = queryUri.split('=')[1];\r\n    return [queryType, query];\r\n};\r\n\r\nconst SingleSearchResultPage: React.FC = (props: any) => {\r\n    const searchUri = decodeURI(props.location.search);\r\n    const [queryType, query] = getQueryTypeAndQuery(searchUri);\r\n    const increaseIndexBy = 5;\r\n\r\n    const [bookQueryStartIndex, setBookQueryStartIndex] = useState(0);\r\n    const [movieQueryStartIndex, setMovieQueryStartIndex] = useState(0);\r\n\r\n    const [movieIdsMatchingTag, setMovieIdsMatchingTag] = useState<Array<string>>([]);\r\n    const [bookIdsMatchingTag, setBookIdsMatchingTag] = useState<Array<string>>([]);\r\n    const [movieResults, setMovieResults] = useState<Array<any>>([]);\r\n    const [bookResults, setBookResults] = useState<Array<any>>([]);\r\n\r\n    const [allResults, setAllResults] = useState<Array<any>>([]);\r\n    const [filterState, setFilterState] = useState<'all' | 'books' | 'movies'>('all');\r\n\r\n    const [hasMoreMovieResults, setHasMoreMovieResults] = useState<boolean>(true);\r\n    const [hasMoreBookResults, setHasMoreBookResults] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        switch (queryType) {\r\n            case SingleQueryType.tag:\r\n                console.log('search tag first');\r\n                break;\r\n            case SingleQueryType.searchBar:\r\n            case SingleQueryType.genre:\r\n            case SingleQueryType.person:\r\n                console.log('search third party person');\r\n                axios.get(`/thirdPartyMovieApi/tmdbMovies/singleQuery/${queryType}/${query}/${bookQueryStartIndex}/${increaseIndexBy}`)\r\n                    .then((res: any) => {\r\n                        const movies = res.data;\r\n                        console.log(movies);\r\n                        if (movies.length === 0) {\r\n                            setHasMoreMovieResults(false);\r\n                        } else {\r\n                            setMovieResults(movies);\r\n                        }\r\n                        axios.get(`/thirdPartyBookApi/googleBooks/singleQuery/${queryType}/${query}/${bookQueryStartIndex}/${increaseIndexBy}`)\r\n                            .then((res: any) => {\r\n                                const books = res.data;\r\n                                console.log(books);\r\n                                if (books.length === 0) {\r\n                                    setHasMoreBookResults(false);\r\n                                } else {\r\n                                    setBookResults(books);\r\n                                    setAllResults([...allResults, ...movies, ...books]);\r\n                                }\r\n                            })\r\n                            .catch((error: any) => {\r\n                                console.log('Error getting third party books', error);\r\n                            });\r\n                    })\r\n                    .catch((error: any) => {\r\n                        console.log('Error getting third party movies', error);\r\n                    });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [queryType, query, movieQueryStartIndex]);\r\n\r\n    const resultsToDisplay = useMemo(() => {\r\n        switch(filterState) {\r\n            case 'movies':\r\n                return movieResults;\r\n            case 'books':\r\n                return bookResults;\r\n            case 'all':\r\n            default:\r\n                return allResults;\r\n        }\r\n    }, [filterState, movieResults, bookResults, allResults]);\r\n\r\n    const doNext = () => {\r\n        switch(filterState) {\r\n            case 'movies':\r\n                setMovieQueryStartIndex(movieQueryStartIndex + increaseIndexBy);\r\n                break;\r\n            case 'books':\r\n                setBookQueryStartIndex(bookQueryStartIndex + increaseIndexBy);\r\n                break;\r\n            case 'all':\r\n                setBookQueryStartIndex(bookQueryStartIndex + increaseIndexBy);\r\n                setMovieQueryStartIndex(movieQueryStartIndex + increaseIndexBy);\r\n                break;\r\n            default:\r\n                return allResults;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container maxWidth='md'>\r\n            <Typography variant='h1'>Search Results</Typography>\r\n            <br/>\r\n            <SearchResultsInfiniteScroll\r\n                resultsToDisplay={resultsToDisplay}\r\n                hasMore={hasMoreMovieResults || hasMoreBookResults}\r\n                doNext={doNext}\r\n            />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SingleSearchResultPage;\r\n"],"sourceRoot":""}